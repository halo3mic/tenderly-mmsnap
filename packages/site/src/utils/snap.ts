import { defaultSnapOrigin } from '../config';
import { GetSnapsResponse, Snap } from '../types';

/**
 * Get the installed snaps in MetaMask.
 *
 * @returns The snaps installed in MetaMask.
 */
export const getSnaps = async (): Promise<GetSnapsResponse> => {
  return (await window.ethereum.request({
    method: 'wallet_getSnaps',
  })) as unknown as GetSnapsResponse;
};

/**
 * Connect a snap to MetaMask.
 *
 * @param snapId - The ID of the snap.
 * @param params - The params to pass with the snap to connect.
 */
export const connectSnap = async (
  snapId: string = defaultSnapOrigin,
  params: Record<'version' | string, unknown> = {},
) => {
  await window.ethereum.request({
    method: 'wallet_requestSnaps',
    params: {
      [snapId]: params,
    },
  });
};

/**
 * Get the snap from MetaMask.
 *
 * @param version - The version of the snap to install (optional).
 * @returns The snap object returned by the extension.
 */
export const getSnap = async (version?: string): Promise<Snap | undefined> => {
  try {
    const snaps = await getSnaps();

    return Object.values(snaps).find(
      (snap) =>
        snap.id === defaultSnapOrigin && (!version || snap.version === version),
    );
  } catch (e) {
    console.log('Failed to obtain installed snap', e);
    return undefined;
  }
};

/**
 * Invoke the "hello" method from the example snap.
 */

export const sendOkTx = async () => {
  try {
    // const [ ,from ] = await window.ethereum.request({
    //   method: 'eth_requestAccounts'
    // }) as string[];

    // if (!from) {
    //   throw new Error("Failed to get an account")
    // }

    // await window.ethereum.request({
    //   method: 'wallet_invokeSnap',
    //   params: { snapId: defaultSnapOrigin, request: { method: 'update_tenderly_access_key' } },
    // });

    window.ethereum.request({
      method: 'eth_sendTransaction', 
      params: [{
        from: '0x2493336E00A8aDFc0eEDD18961A49F2ACAf8793f', 
        to: '0x1111111254eeb25477b68fb85ed929f73a960582', 
        data: '0x12aa3caf0000000000000000000000003b17056cc4439c61cea41fe1c9f517af75a978f7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000003b17056cc4439c61cea41fe1c9f517af75a978f70000000000000000000000002493336e00a8adfc0eedd18961a49f2acaf8793f0000000000000000000000000000000000000000000000000000000007365040000000000000000000000000000000000000000000000000015c988148696a7b00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000002493336e00a8adfc0eedd18961a49f2acaf8793f0000000000000000000000001111111254eeb25477b68fb85ed929f73a960582ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000063a287b1000000000000000000000000000000000000000000000000000000000000001bd43d4a5aae6947e4af4f0f401252e284c58a15c8e6d378124f675b3533a6a14f357bc3734dc721979533397830f08e0c7c47be9f6713095dec8cabd9835fade600000000000000000000000000000000000000000000000000000000000002c986f0c93c09765b02922d6082b0c6a2ee627a685dcf324fcd1fcab32c69e988aa6b86242841f8fe5b1f7b93bbdbce260e608cc8b5f6917c52bcb1503dfed78cd600000000000000000000000000000000000000000000026b00025500021900a0860a32ec00000000000000000000000000000000000000000000000000000000073650400001f051201111111254fb6c44bac0bed2854e76f90643097da0b86991c6218b36c1d19d4a2e9eb0ce3606eb480124d0a3b665000000000000000000000000000000000000000063a1d85300000185106f6a79000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000af0b0000f0210d0f421f0009c72406703b50506b0000000000000000000000003b17056cc4439c61cea41fe1c9f517af75a978f7000000000000000000000000000000000000000000000000015e650562f69a60000000000000000000000000000000000000000000000000000000000736504000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000411cb9b68570b5d92b435083c017c0f8f2bb5fc9460fee5900fa990b61559b0a46683d1810e1cc581ae1a629e84c56386b326235197ccc2498ec7b43de3b12b68596000000000000000000000000000000000000000000000000000000000000004101c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0601111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000e26b9977'
      }]
    })
  } catch (e) {
    console.error(e)
  }

};

export const sendFailTx = async () => {
  try {
    window.ethereum.request({
      method: 'eth_sendTransaction', 
      params: [{
        from: '0x2493336E00A8aDFc0eEDD18961A49F2ACAf8793f', 
        to: '0x1111111254eeb25477b68fb85ed929f73a960582', 
        data: '0x12aa3caf0000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e0000000000000000000000000c4ee0aa2d993ca7c9263ecfa26c6f7e13009d2b6000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000074ac706873c399dfc73a4679b1e1fbf474c306e1000000000000000000000000df4a73ec1b224ac578f05a28e5238dae576857980000000000000000000000000000000000000000001acd61ef12167485cc000000000000000000000000000000000000000000000000000004f4448b3fe4b7f9000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c30000000000000000000000000000000000000000000000a500008f00005300206ae4071118002dc6c074ac706873c399dfc73a4679b1e1fbf474c306e10000000000000000000000000000000000000000000000000000000000000001c4ee0aa2d993ca7c9263ecfa26c6f7e13009d2b64101c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000000e26b9977'
      }]
    })
  } catch (e) {
    console.error(e)
  }

};

export const updateAccessKey = async () => {
  await window.ethereum.request({
      method: 'wallet_invokeSnap',
      params: { snapId: defaultSnapOrigin, request: { method: 'update_tenderly_access_key' } },
    });
};

export const isLocalSnap = (snapId: string) => snapId.startsWith('local:');
